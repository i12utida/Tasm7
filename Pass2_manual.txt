1行目:SPK	EQU	01H
    ・initBuffers()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・トークン番号を取ってくる(LABEL)
    ・getString()でLexicalのstrをPass2のstrに代入(SPK)
    ・setLabel(str)を実行
    ・トークン番号を取ってくる(EQU)
    ・setRsvWord(str)を実行

    EQUの処理{
    ・EQUなのでaddressにpcaを代入
    }

    ・styleAnalyzer(pca,token_id)を実行(7){
        ・Lexicalのstrに代入するためgetToken()を実行(01H)
        ・LexicalのstrをgetStringでopr1[]に代入
        ・setMnemonic(opr1)を実行(01H)
    
        opStyle()でのEQUの処理{
        ・16進文字列をint型に変換するためdataに対してgetDigit()を呼び出す
        ・pca = pca + dataを実行
        ・setPca(pca)を実行
        }
    }

    EQUの処理{
    ・pcaにaddressを代入
    }

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

2行目:SIO_DAT	EQU	02H
    ・initBuffers()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・トークン番号を取ってくる(LABEL)
    ・getString()でLexicalのstrをPass2のstrに代入(SIO_DAT)
    ・setLabel(str)を実行
    ・トークン番号を取ってくる(EQU)
    ・setRsvWord(str)を実行

    EQUの処理{
    ・EQUなのでaddressにpcaを代入
    }

    ・styleAnalyzer(pca,token_id)を実行(7){
        ・Lexicalのstrに代入するためgetToken()を実行(02H)
        ・LexicalのstrをgetStringでPass2のopr1[]に代入
        ・setMnemonic(str)を実行(02H)
    
        opStyle()でのEQUの処理{
        ・16進文字列をint型に変換するためdataに対してgetDigit()を呼び出す
        ・pca = pca + dataを実行
        ・setPca(pca)を実行
        }
    }

    EQUの処理{
    ・pcaにaddressを代入
    }

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

3行目:SIO_STA	EQU	03H
    ・initBuffers()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・トークン番号を取ってくる(LABEL)
    ・getString()でLexicalのstrをPass2のstrに代入(SIO_STA)
    ・setLabel(str)を実行
    ・トークン番号を取ってくる(EQU)
    ・setRsvWord(str)を実行

    EQUの処理{
    ・EQUなのでaddressにpcaを代入
    }

    ・styleAnalyzer(pca,token_id)を実行(7){
        ・Lexicalのstrに代入するためgetToken()を実行(03H)
        ・LexicalのstrをgetStringでopr1[]に代入
        ・setMnemonic(opr1)を実行(03H)
    
        opStyle()でのEQUの処理{
        ・16進文字列をint型に変換するためdataに対してgetDigit()を呼び出す
        ・pca = pca + dataを実行
        ・setPca(pca)を実行
        }
    }

    EQUの処理{
    ・pcaにaddressを代入
    }

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

4行目:
    ・initBuffers()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・トークン番号を取ってくる(改行)

    ・改行なので一行読み込み終了
    
    ・printBuffer()を実行
    ・次の行へ

5行目:; 電子オルゴール
    ・initBuffers()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・トークン番号を取ってくる(Comment)

    Commentの処理{
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    }

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

6行目:	ORG	70H
    ・initBuffers()を実行
    ・setPca(pca)を実行
    ・getLabal()を実行(false)
    ・トークン番号を取ってくる(ORG)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(pca,token_id)を実行(7){
        ・Lexicalのstrに代入するためにgetToken()を実行(70H)
        ・getString()でLexicalのstrをopr1[]に代入
        ・setMnemonic(opr1)を実行
        
        OperationAnalyzerでのORGの処理{
            ・dataに対してgetDigit()を実行
            ・setPca(data)を実行
        }
    }

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

7行目:START	LD	SP,#0E0H
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()の実行(LABEL)
    ・getString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(LD)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(SP)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

8行目:	LD	G1,#TABLE-1
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(LD)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G1)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

9行目:L9	ADD	G1,#1
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()の実行(LABEL)
    ・getString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(ADD)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G1)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

10行目:	LD	G2,0,G1    
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(LD)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr3[]に代入
        ・setMnemonic(opr3)を実行
        ・getTokenを三回呼び出しているのでインデクスドが確定し、xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

11行目:	CMP	G2,#0
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(CMP)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

12行目:	JZ	L15
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(JZ)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(6)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・getToken()を実行
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','ではなくインデクスドではないことが確定したので
        　xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr1)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

13行目:	ADD	G1,#1		; ステート
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()の実行(LABEL)
    ・getString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(ADD)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G1)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・nextchが改行ではないのでgetToken()を実行(Comment)
    ・トークン番号がコメントなのでgetString()でLexicalのstrを取ってくる
    ・setComment(str)を実行
    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

14行目:L10	PUSH	G2		; 6
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()の実行(LABEL)
    ・getString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(PUSH)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(2)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G1)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・nextchが改行ではないのでgetToken()を実行(Comment)
    ・トークン番号がコメントなのでgetString()でLexicalのstrを取ってくる
    ・setComment(str)を実行
    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

15行目:	LD	G2,0,G1		; 7
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(LD)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・終わりが','なのでインでクスドが確定し、xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・getToken()を実行
        ・opr3[]にgetString()を実行
        ・dataに対してeqAnalyzer(opr3)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }
    
    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

16行目:L11	SUB	G2,#1		; 5
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()の実行(L11)
    ・getString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(SUB)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

17行目:	NO			; 3
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(NO)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(1)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

18行目:	NO			; 3
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(NO)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(1)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

19行目:	JZ	L12		; 4
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(JZ)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(6)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・getToken()を実行
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','ではなくインデクスドではないことが確定したので
        　xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr1)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

20行目:	JMP	L11		; 5
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(JMP)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(6)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・getToken()を実行
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','ではなくインデクスドではないことが確定したので
        　xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr1)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

21行目:L12	LD	G2,#0FFH	; 5
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()の実行(LABEL)
    ・getString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(LD)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

22行目:	OUT	G2,SPK		; 7
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(OUT)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(3)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・grが確定したので、first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・次は式がくるはずなのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・nextchが改行ではないのでgetToken()を実行(Comment)
    ・トークン番号がコメントなのでgetString()でLexicalのstrを取ってくる
    ・setComment(str)を実行
    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

23行目:	LD	G2,0,G1		; 7
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(LD)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・終わりが','なのでインでクスドが確定し、xrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

24行目:L13	SUB	G2,#1		; 5
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()の実行(LABEL)
    ・getString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(SUB)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

25行目:	NO			; 3
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(NO)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(1)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

26行目:	JZ	L14		; 4
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(JZ)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(6)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・getToken()を実行
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','ではなくインデクスドではないことが確定したので
        　xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr1)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

27行目:	JMP	L13		; 5
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(JZ)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(6)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・getToken()を実行
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','ではなくインデクスドではないことが確定したので
        　xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr1)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

28行目:L14	OUT	G2,SPK		; 7
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(OUT)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(3)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・grが確定したので、first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・次は式がくるはずなのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・nextchが改行ではないのでgetToken()を実行(Comment)
    ・トークン番号がコメントなのでgetString()でLexicalのstrを取ってくる
    ・setComment(str)を実行
    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

29行目:	POP	G2		; 6
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()の実行(LABEL)
    ・getString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(PUSH)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(2)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G1)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・nextchが改行ではないのでgetToken()を実行(Comment)
    ・トークン番号がコメントなのでgetString()でLexicalのstrを取ってくる
    ・setComment(str)を実行
    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

30行目:	SUB	G2,#1		; 5
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(SUB)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(4)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・token_id=getToken()を実行(G2)
        ・token_idよりgrを決定
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','なのでgetToken()を実行
        ・getString()でopr2[]に代入
        ・setMnemonic(opr2)を実行
        ・opr2[]の始まりが'#'と確定したのでxrを決定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr2)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

31行目:	JZ	L9		; 4
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(JZ)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(6)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・getToken()を実行
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','ではなくインデクスドではないことが確定したので
        　xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr1)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

32行目:	JMP	L10		; 5
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・getToken()を実行(JZ)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(6)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・getToken()を実行
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','ではなくインデクスドではないことが確定したので
        　xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr1)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

33行目:L15	JMP	START
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・getToken()を実行(LABEL)
    ・Pass2のstrにgetString()を実行
    ・setLabel(str)を実行
    ・getToken()を実行(JMP)
    ・getString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(6)を実行{
        ・first_byte=searchMachineCode(token_id)を実行
        ・getToken()を実行()
        ・getString()でopr1[]に代入
        ・setMnemonic(opr1)を実行
        ・終わりが','ではなくインデクスドではないことが確定したので
        　xrを確定
        ・first_byteにfirst_byteとgrとxrのANDを取った物を代入
        ・setFirstByte(toHex(first_byte))を実行
        ・machine_code[cnt]にfirst_byteを代入
        ・cntを増加
        ・dataに対してeqAnalyzer(opr1)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
    }

    ・pca = pca + searchSize(token_id)を実行

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

34行目:;L15	HALT
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・token_id = getToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

35行目:; ドレミの歌
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・token_id = getToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

36行目:	
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(改行)
    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

37行目:TABLE	DC	0C5H,0E8H
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(true)
    ・token_id = getToken()を実行(LABEL)
    ・Pass2のstrに対してgetString()を実行
    ・setLabel(str)を実行
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し(この繰り返しは最大4回まで)
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

38行目:	DC	049H,0D1H
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

39行目:	DC	0F7H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

40行目:	DC	041H,0E8H
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

41行目:	DC	0A5H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

42行目:	DC	083H,0E8H
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

43行目:	DC	0A5H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

44行目:	DC	0A5H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

45行目:	DC	0DCH,0D1H
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

46行目:	DC	052H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

47行目:	DC	057H,0AFH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

48行目:	DC	057H,0AFH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

49行目:	DC	052H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

50行目:	DC	049H,0D1H
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

51行目:	DC	0AFH,0AFH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

52行目:	DC	0AFH,0AFH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

53行目:	DC	0AFH,0AFH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

54行目:	DC	0AFH,0AFH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

55行目:	DC	0F7H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

56行目:	DC	057H,0AFH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

57行目:	DC	0C4H,09CH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

58行目:	DC	062H,09CH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

59行目:	DC	052H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

60行目:	DC	0C4H,09CH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

61行目:	DC	0A5H,0BAH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

62行目:	DC	0C4H,09CH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

63行目:	DC	0C4H,09CH
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・nextchが改行なので一行読み込み終了
    
    ・printBufffer()を実行
    ・次の行へ

64行目:	DC	000H		; 終了
    ・initBuffer()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・token_id = getToken()を実行(DC)
    ・Pass2のstrに対してgetString()を実行
    ・setRsvWord(str)を実行
    ・styleAnalyzer(8)を実行{
        ・first_byte = searchMachineCode(token_id)を実行
        ・setFirstByte(toHex(first_byte))を実行
        ここから繰り返し
        ・getToken()を実行
        ・getString()をOperationAnalyzerのstrに代入
        ・setMnemonic(str)を実行
        ・dataに対してeqAnalyzer(str)を実行
        ・dataを16進int型に変換してsecond_byteに代入
        ・setSecondByte(toHex(second_byte))を実行
        ・machine_code[cnt]にsecond_byteを代入
        ・cnt増加
        ここまで繰り返し(改行もしくはコメントなら抜け出す)

    }

    ・終わりが改行ではないのでgetToken()を実行(Comment)
    ・getString()でLexicalのstrをPass2のstrに代入
    ・setComment(str)を実行
    ・終わりが改行なので一行読み込み終了

    ・printBufffer()を実行
    ・次の行へ

65行目: DS 8
    ・initBuffers()を実行
    ・setPca(pca)を実行
    ・getLabel()を実行(false)
    ・トークン番号を取ってくる(DS)
    ・getString()でPass2のstrにLexicalをstrを取ってくる
    ・setRsvWord(str)を実行

    ・styleAnalyzer(pca,token_id)を実行(7){
        ・Lexicalのstrに代入するためgetToken()を実行(8)
        ・LexicalのstrをgetStringでopr1[]に代入
        ・setMnemonic(opr1)を実行(8)
    
        opStyle()でのDSの処理{
            ・dataに対してeqAnalyzer(opr1)を実行
            dataの回数分繰り返し{       (最大4回,超えたらバッファを初期化)
                ・setMachineCode(00H)
                ・cntを増加
            }
        }
        
    }

    ・pca = pca + getCnt()を実行

    ・改行なので一行読み込み終了

    ・printBuffer()を実行
    ・次の行へ

