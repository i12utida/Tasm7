
/*
 *基本的にこのLexicalはchで処理を行うため、
 *nextchに常にトークンの先頭がくる設計になっている.
 *
 *特別な処理以外ではnextchの判定を行う事は
 *基本的にしないような設計にもなっているので注意.
 *
 */


#include <string.hmm>
#include <stdlib.hmm>
#include <stdio.hmm>
#include <ctype.hmm>

#include "Lexical.hmm"
#include "Error.hmm"


// static変数
FILE fp;            /* Lexicalのファイルポインタ */
char ch;            /* 現在の文字 */
char nextch;        /* 1つ先の文字 */
int token_id;       /* トークン番号 */
boolean label;
char[] str = array(LENGTH);          /* つづりの記憶領域を生成 */

RsvWord[] rsvword = {
{ "NO",		LxNO }, 
{ "LD",		LxLD },
{ "ST", 	LxST }, 
{ "ADD", 	LxADD },
{ "SUB", 	LxSUB },
{ "CMP",	LxCMP },
{ "AND", 	LxAND }, 
{ "OR",   	LxOR },
{ "XOR", 	LxXOR }, 
{ "SHLA",  	LxSHLA },
{ "SHLL",	LxSHLL }, 
{ "SHRA",  	LxSHRA },
{ "SHRL", 	LxSHRL }, 
{ "JMP",  	LxJMP },
{ "JZ",		LxJZ }, 
{ "JC",   	LxJC },
{ "JM",		LxJM }, 
{ "CALL",  	LxCALL },
{ "JNZ",	LxJNZ}, 
{ "JNC",    LxJNC },
{ "JNM", 	LxJNM }, 
{ "IN",     LxIN },
{ "OUT", 	LxOUT }, 
{ "PUSH",  	LxPUSH },
{ "PUSHF",	LxPUSHF }, 
{ "POP", 	LxPOP },
{ "POPF", 	LxPOPF }, 
{ "EI",		LxEI },
{ "DI",		LxDI }, 
{ "RET",	LxRET },
{ "RETI",	LxRETI }, 
{ "HALT",	LxHALT },
{ "EQU",	LxEQU }, 
{ "ORG",	LxORG },
{ "DS",		LxDS }, 
{ "DC",		LxDC },

{ "G0",		LxG0 }, 
{ "G1",		LxG1 },
{ "G2",		LxG2 }, 
{ "SP",		LxSP }
};

/*********** 予約語トークン番号を探す関数 **********/
int searchRsvWord(char[] word){
    int i;
    
    for(i = 0; i < LxRSV_NUM + LxREG_NUM; i = i+1){
        if(strCmp(word,rsvword[i].token) == 0){
            token_id = rsvword[i].rsvword_id;
            return token_id;
        }
    }

    return token_id;
}

/******** 次の文字を取ってきて行を1行進める関数 *********/
public char getCh() {
    ch = nextch;                                /* 次の文字を現在の文字にする */
    if(feof(fp)) {                        /* 次の入力がEOFなら */
        nextch = EOF;                           /* nextchにEOFの目印を */
    } else {                                    /* そうでなければ */
        nextch = toUpper(fgetc(fp));      /* nextchに次の文字を読み込む */

        if(nextch==EOF)                         /* nextchにEOFが読み込まれていたら */
            error("input has '\x7f'");          /* 入力にEOFをがあるエラーを出力 */
    }

    return ch;                                  /* 現在の文字を返す */
}

/********** 改行か文字がくるまで空白を読み飛ばす関数 *************/
void skipSpaces() {
    while(nextch != '\n' && isSpace(nextch)){               /* 改行以外かつ空白なら */
        getCh();                                    /* 1文字読み飛ばす */
    }
}

/*************** 行末まで読み飛ばす関数 *******************/
public void skipToNewLineOrEOF() {
    while(nextch != '\n' && nextch != EOF){                 /* 改行かEOFが来るまで */
        getCh();                                    /* 1文字読み飛ばす */
    }
}

/*********** C++タイプのコメントを読み飛ばす関数 ***********/
void skipCppCom() {
    skipToNewLineOrEOF();                           /* 改行またはEOFまで読み飛ばす */
}

/************** コメント、空白を読み飛ばす **************/
void skipAllSpaces() {
    while(true) {
        skipSpaces();                               /* 改行以外の空白を飛ばす */
        if(ch == '/' && nextch == '/') {            /* "//"ならコメント開始 */
            skipCppCom();                           /* コメントを読み飛ばす */
        } else if(nextch == '\n') {
            break;
        } else{ 
            break;                                  /* "//",'\n'以外なら抜け出す */
        }
    }
}

/********************** 8進数字かテスト ****************************/
boolean isOdigit(char ch) {
  return ord('0') <= ord(ch) && ord(ch) <= ord('7'); // '0'〜'7'が8進数
}

/**********************  16進数字の値を返す ******************/
int hex(char ch) {
  if (isDigit(ch)) return ord(ch) - ord('0');      // '0'〜'9'の場合
  ch = toUpper(ch);                                // 英字は大文字に統一
  return ord(ch) - ord('A') + 10;                  // 'A'〜'F'の場合
}

/*******************  16進数を読んで値を返す ******************/
int getHex() {
    int v = 0;                                       // 初期値は 0
    int i = 0;
    int len = strLen(str);

    if(len == 4){                                   // 16進が最初の<数字>を含むなら
        i = 1;
    }
  /*** ここには16進の形式のエラー処理を記述する ******/
  
  /***************************************************/
  while (isXdigit(str[i])) {                       // 16進数字の間
    v = v*16 + hex(str[i]);                        // 値を計算
    i = i+1;
  }
  return v;                                        // 16進数の値を返す
}

/****************** 10進数を読んで値を返す ********************/
int getDec() {
    int val = 0;                                   // 初期値は 0
    int i;
    int len = strLen(str);                           // strの長さを求める

    for(i = 0; isDigit(str[i]) == true && i < len; i = i+1){
        val = val*10 + ord(str[i]) - ord('0');             // 値を計算
    }
  return val;						                           // 10進数の値を返す
}

/******************* 数値を読み込む ***********************/
public int getDigit() {
    int val = 0;
    int len = strLen(str);
    
    if(str[len - 1] == 'H'){
            val = getHex();                             // 16進数の読み込み
    } else{                                             // それ以外は10進のはず
        val = getDec();                                 // 10進数を読み込む
    }
  
    return val;                                         // val=値
}


/************* 文字列を読んでstrに設定する ************/
void getString(){
    str[0] = ch;            /* strに頭文字を記憶*/
    int i;                  /* strの添字用変数を宣言 */

    if(token_id == LxCOM){      /* コメントの場合は */
         for(i = 1; nextch != '\n'; i = i+1){   /* nextchが改行以外なら*/
            getCh();            /* 次の文字を取ってくる */
            str[i] = ch;        /* chをstrに記憶 */
        }
    } else{                     /* そうでない場合は */
        for(i = 1; isAlnum(nextch) == true || nextch == '_'; i = i+1){   /* nextchが英字もしくは数字なら */
            getCh();            /* 次の文字を取ってくる */
            str[i] = ch;        /* chをstrに記憶 */
        }
    }

    str[i] = '\0';

}

/************* 文字列を取ってきてstrに格納する関数 ***********/
int getWord(){
    getString();                           /* strに文字列を取ってくる */
    
    token_id = searchRsvWord(str);      /* トークンが予約語と一致するか確認 */
    
    if(0 <= token_id && token_id < LxRSV_NUM){    /* token_idが予約語なら */
        return token_id;                                 /* token_idを返す */
    } else if(LxG0 <= token_id && token_id <= LxSP){
        return token_id;
    } else {                                             /* token_idが予約語以外なら */
        return LxNAM;                                    /* ラベルであることを返す */
    }
    
    return token_id;
}

/********* ラベルの有無を返す **********/
public boolean getLabel(){
    //printf("start getLabel()\n");
    if( ch == '\0'){    /* まだ一度も文字を取ってきていない場合は */
        getCh();        /* chにはnextchの改行をnextchには文字の先頭を取ってくる */
    }

    if(ch == '\n' && nextch == ' '){        /* 行頭が空白なら */
        label = false;
        return label;                       /* ラベルなしなのでfalse */
    } else if(ch == '\n' && isAlpha(nextch)){  /* 行頭がアルファベットなら */
        label = true;
        return label;                        /* ラベルがあるのでtrue */
    } else{                                 /* それ以外なら */
        ;                                   /* エラー */
    }

    return false;
}

/********* 次のトークンを読んでトークン番号を返す関数 **********/
public int getToken(){
    token_id = -1;          /* トークンを初期化 */

    if(ch == '\0'){         /* まだ一度も文字を取ってきていない場合は */
        getCh();        /* ch にはnextchの改行をnextchに文字の行頭を取ってくる */
    }

    getCh();

    if(ch == ' ' || ch == '\t'){
        token_id = LxSPC;
    } else if(ch == '"'){           /* 文字列であるなら */
        getCh();                    /* 最初のダブルクウォートを飛ばす */
        getString();                /* strに文字列を格納 */
        getCh();                    /* 終わりのダブルクウォートを飛ばす */
        token_id = LxSTR;           /* トークン番号(文字列)を設定 */
    } else if(ch == '\''){          /* 文字定数であるなら */
        getCh();                    /* 最初のシングルクウォートを飛ばす */
        getString();                /* strに文字を格納 */
        getCh();                    /* 終わりのシングルクウォートを飛ばす */
        token_id = LxNUM;           /* トークン番号(数値)を設定 */
    } else if(ch == '\n'){          /* 改行であるなら */
        token_id = LxEOL;           /* トークン番号(改行)を返す */
        return LxEOL;               /* 改行だけはスペースを飛ばさないまま返す */
    } else if(ch == EOF){           /* EOFなら */
        token_id = LxEOF;           /* トークン番号(EOF)を設定 */
    } else if(ch == '('){           /* 左括弧なら */
        token_id = LxLBR;
    } else if(ch == ')'){           /* 右括弧なら */
        token_id = LxRBR;
    } else if(ch == ','){           /* カンマなら */
        token_id = LxCMM;           /* トークン番号(カンマ)を設定 */
    } else if(ch == ';'){           /* セミコロンなら */
        token_id = LxCOM;           /* トークン番号(セミコロン)を設定 */
        getString();
    } else if(ch == '+'){           /* プラスなら */
        token_id = LxPLS;           /* トークン番号(プラス)を設定 */
    } else if(ch == '-'){           /* マイナスなら */
        token_id = LxMNS;           /* トークン番号(マイナス)を設定 */
    } else if(ch == '*'){           /* 乗算なら */
        token_id = LxMUL;           /* トークン番号(乗算)を設定 */
    } else if(ch == '/'){           /* 除算なら */
        token_id = LxDIV;           /* トークン番号(除算)を設定 */
    } else if(ch == '#'){           /* イミディエイトなら */
        token_id = LxIMM;           /* トークン番号(イミディエイト)を設定 */
    } else if(isAlpha(ch)){         /* chがアルファベットなら */
        token_id = getWord();       /* トークン番号(予約語かラベル)を返す */
    } else if(isDigit(ch)){         /* 数値であるなら */
        getString();
        token_id = LxNUM;         /* トークン番号(数値)を設定 */
    } else{                         /* エラーなら */
        token_id = -1;              // とりあえず終了するために代用
    }
    
    skipSpaces();
    return token_id;                /* トークン番号を返す */
}

/******* strを取ってくる関数 *********/
public char[] getLxStr(){
    return str;
}

/************** Lexicalのファイルポインタを設定 ***************/
public void setLxFp(FILE file){
    fp = file;
}

/************** トークン番号を取ってくる *******************/
public int getTokenID(){
    return token_id;
}

/******** Lexicalの初期化関数 *******/
public void initLexical() {
    ch = '\0';                          /* 現在の文字を初期化 */
    nextch = '\n';                      /* 次の文字の初期化 */
    token_id = -1;                      /* トークン番号の初期化 */
    str[0] = '\0';                         /* strの初期化 */
}

/* テスト用 */

public char gch(){
    return ch;
}

public char gnextch(){
    return nextch;
}
