
/*
 * いま許容しているバグ!!
 * 現状それぞれのopStyle関数呼び出し後にリスト出力を行っているが、
 * これではコメント文のみの行などが出力されないため、
 * 今後改行トークンが来たら出力するという手法に変更する必要がある。
 */

#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>

#include "Pass2.hmm"
#include "Lexical.hmm"
#include "SymTbl.hmm"
#include "OperationTbl.hmm"
#include "Util.hmm"
#include "Error.hmm"
#include "Editor.hmm"

//#define UNIX

// static変数
boolean eofflag = false;    /* EOFフラグ */
int pca;
int op;
int gr;
int xr;
int data;

int first_byte;
int second_byte;
int third_byte;
int forth_byte;
int[] byte = array(256);

int token_id;
int style;
int address;

char[] str;
char[] opr1 = array(40);
char[] opr2 = array(40);
char[] opr3 = array(40);

boolean label;

int cnt;

/* 拡張式 
 * expantion -> expression
 *              STRING
 */
void expantion(){
    int i;
    if(token_id == LxSTR){
        str = getLxStr();
	    for(i = 0; i < strLen(str); i = i+1){
		    byte[cnt] = ord(str[i]);
            cnt = cnt + 1;
        }
        setOpr("\"");
        setOpr(str);
        setOpr("\"");
        token_id = getToken();          /* カンマ、改行、コメントがくる */
        #ifdef UNIX
            printf("expansion token_id = *%d*\n",token_id);
        #endif
    } else if(token_id != LxEOL && token_id != LxEOF){
        byte[cnt] = eqAnalyzer();
        cnt = cnt + 1;
        token_id = getTokenID();    /* カンマ、改行、コメントがくる */
    }
}




/* 値列
 * valueSeq -> expantion
 */
void valueSeq(){
    cnt = 0;
    while(true){
	    token_id = getToken();
	    expantion();
	    if(token_id == LxCMM){
	        setOpr(",");
	    } else if(token_id == LxCOM){
            str = getLxStr();
            setComment(str);
	    } else if(token_id == LxEOL || token_id == LxEOF){
	        break ;
	    } else {
            /* エラー処理 */
	        break ;
	    }
    }
}


void EQU(){
    int value;
    token_id = getToken();      /* <式>の最初の部分を取ってくる */
    value = eqAnalyzer();       /* 式を解析して結果を取ってくる */
    setPca(value);              /* 返ってきた値をリストのpcaの部分にセット */
    token_id = getTokenID();    /* 現在のトークン番号を取ってくる */

}

void DS(){
    int i;
    int value;
    
    
    token_id = getToken();      /* <式>の最初の部分を取ってくる */
    value = eqAnalyzer();       /* 式を解析して結果を取ってくる */
    token_id = getTokenID();    /* 現在のトークン番号を取ってくる */
    
    if(token_id == LxCOM){      /* コメントなら */
        str = getLxStr();           /* コメントを取ってくる */
        setComment(str);            /* リストにコメントをセットする */
    }
    
    while(value/5 != 0){        /* 値が4以上のとき */
        setFirstByte(0);        /* リストの第一バイトをセット */
        setSecondByte(0);       /* リストの第二バイトをセット */
        setThirdByte(0);        /* リストの第三バイトをセット */
        setForthByte(0);        /* リストの第四バイトをセット */
        value = value-4;        /* 4つ領域を割り当てたので4引く */
        for (i = 0; i < 4; i = i+1){
            setMachineCode(0);
        }
        setPca(pca);
        pca = pca + 4;          /* pcaをカウントアップ */
        printBuffer();          /* リストのバッファを出力 */
        initBuffers();           /* バッファを初期化 */
    }

    while(value != 0){
        pca = pca + value;
        setPca(pca);
        
        if(value == 4){
            setForthByte(0);
            setMachineCode(0);
            value = value - 1;
        }

        if(value == 3){
            setThirdByte(0);
            setMachineCode(0);
            value = value - 1;
        }

        if(value == 2){
            setSecondByte(0);
            setMachineCode(0);
            value = value - 1;
        }

        if(value == 1){
            setFirstByte(0);
            setMachineCode(0);
            value = value - 1;
        }

    }
}

void ORG(){
    int i;
    int value;

    setPca(1000);                       /* ORGの場合Pcaは空白なので空白をセット */
    token_id = getToken();              /* <式>の最初の部分を取ってくる */
    value = eqAnalyzer();               /* 式の解析を行い結果を取ってくる */
    token_id = getTokenID();            /* 現在のトークン番号を取ってくる */
    while(pca < value){                 /* 式の値まで */
        setMachineCode(0);                  /* 16進ファイルの機械語を0で埋める */
        pca = pca + 1;                      /* pcaをカウントアップ */
    }
}


void opStyle1(){
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */
    first_byte = op;                    /* 第一バイトをセット */
    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */
    token_id = getToken();              /* コメントもしくは改行トークンを取ってくる */
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }
}

void opStyle2(){
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */
    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    }
    first_byte = op | gr;               /* 第一バイトを確定 */
    setMachineCode(first_byte);         /* 16進ファイルの第一バイトをセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */
    token_id = getToken();              /* コメントもしくは改行トークンを取ってくる */
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }
}

void opStyle3(){
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    }

    first_byte = op | gr;               /* 第一バイトを確定 */
    setMachineCode(first_byte);         /* 16進ファイルの第一バイトをセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    token_id = getToken();              /* カンマを取ってくる */
    if(token_id == LxCMM){              /* カンマなら */
        setOpr(",");                    /* リストのオペランドにカンマをセット */
    } else {
        /* <式>の部分がないというエラー処理を書く */
    }

    token_id = getToken();              /* <式>の最初の部分を取ってくる */
    second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */
    setSecondByte(second_byte);         /* リストの第二バイトをセット */
    
    token_id = getTokenID();              /* 式の解析でトークン番号が変動したので取ってくる(コメントか改行がくるはず) */

    

    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }

}

void opStyle4(){
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    }

    token_id = getToken();              /* カンマを取ってくる */
    if(token_id == LxCMM){              /* カンマなら */
        setOpr(",");                    /* リストのオペランドにカンマをセット */
    } else {
        /* <式>の部分がないというエラー処理を書く */
    }

    token_id = getToken();              /* '#'もしくは数値を取ってくる */
    if(token_id == LxIMM){              /* イミディエイトなら */
        setOpr("#");                        /* '#'をセット */
        xr = 0x03;                          /* xr部をセット */
        token_id = getToken();              /* <式>の最初の部分を取ってくる */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
    } else if(token_id == LxNUM || token_id == LxNAM){      /* 数値もしくはラベルなら */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
        
        token_id = getTokenID();            /* 式解析でトークン番号が変動したので現在のトークン番号を取ってくる */
        if(token_id == LxCMM){              /* カンマ(インデクス)なら */
            setOpr(",");                        /* リストのオペランドにカンマをセット */
            token_id = getToken();              /* <インデクス>の部分を取ってくる */
            if(token_id == LxG1){               /* G1インデクスモードなら */
                xr = 0x01;                          /* xrをセット */
            } else if(token_id == LxG2){         /* G2インデクスモードなら */
                xr = 0x02;                          /* xrをセット */
            } else{
                /* インデクス部が異常であるエラー処理 */
            }
            opr3 = getLxStr();                  /* Lexicalのstrをopr3にセット */
            setOpr(opr3);                       /* リストのオペランドにセット */
        } else {                            /* ダイレクトであるなら */
            xr = 0x00;                          /* xrをセット */
        }
    }

    first_byte = op | gr | xr;          /* first_byteを確定 */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    if(token_id == LxG1 || token_id == LxG2){   /* インデクスモードだったら */
        token_id = getToken();                      /* コメントもしくは改行を取ってくる */
    } else {                                    /* それ以外のモードなら */
        
        token_id = getTokenID();                    /* 式の解析で現在のトークン番号が変わったので取ってくる(コメントもしくは改行) */
    }
    
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }

    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */

}

void opStyle5(){

    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    }

    token_id = getToken();              /* カンマを取ってくる */
    if(token_id == LxCMM){              /* カンマなら */
        setOpr(",");                    /* リストのオペランドにカンマをセット */
    } else {
        /* <式>の部分がないというエラー処理を書く */
    }

    token_id = getToken();              /* <式>の最初の部分を取ってくる */
    if(token_id == LxNUM || token_id == LxNAM){      /* 数値もしくはラベルなら */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
        
        token_id = getTokenID();            /* 式解析でトークン番号が変動したので現在のトークン番号を取ってくる */
        if(token_id == LxCMM){              /* カンマ(インデクス)なら */
            setOpr(",");                        /* リストのオペランドにカンマをセット */
            token_id = getToken();              /* <インデクス>の部分を取ってくる */
            if(token_id == LxG1){               /* G1インデクスモードなら */
                xr = 0x01;                          /* xrをセット */
            } else if(token_id == LxG2){         /* G2インデクスモードなら */
                xr = 0x02;                          /* xrをセット */
            } else{
                /* インデクス部が異常であるエラー処理 */
            }
            opr3 = getLxStr();                  /* Lexicalのstrをopr3にセット */
            setOpr(opr3);                       /* リストのオペランドにセット */
        } else {                            /* ダイレクトであるなら */
            xr = 0x00;                          /* xrをセット */
        }
    }

    first_byte = op | gr | xr;          /* first_byteを確定 */
    setMachineCode(first_byte);         /* 16進ファイルの第一バイトをセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    if(token_id == LxG1 || token_id == LxG2){   /* インデクスモードだったら */
        token_id = getToken();                      /* コメントもしくは改行を取ってくる */
    } else {                                    /* それ以外のモードなら */
        
        token_id = getTokenID();                    /* 式の解析で現在のトークン番号が変わったので取ってくる(コメントもしくは改行) */
    }
    
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }

    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */

}

void opStyle6(){

    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    token_id = getToken();              /* <式>の最初の部分を取ってくる */
    if(token_id == LxNUM || token_id == LxNAM){      /* 数値もしくはラベルなら */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
        
        token_id = getTokenID();            /* 式解析でトークン番号が変動したので現在のトークン番号を取ってくる */
        if(token_id == LxCMM){              /* カンマ(インデクス)なら */
            setOpr(",");                        /* リストのオペランドにカンマをセット */
            token_id = getToken();              /* <インデクス>の部分を取ってくる */
            if(token_id == LxG1){               /* G1インデクスモードなら */
                xr = 0x01;                          /* xrをセット */
            } else if(token_id == LxG2){         /* G2インデクスモードなら */
                xr = 0x02;                          /* xrをセット */
            } else{
                /* インデクス部が異常であるエラー処理 */
            }
            opr1 = getLxStr();                  /* Lexicalのstrをopr3にセット */
            setOpr(opr1);                       /* リストのオペランドにセット */
        } else {                            /* ダイレクトであるなら */
            xr = 0x00;                          /* xrをセット */
        }
    }

    first_byte = op | xr;          /* first_byteを確定 */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    if(token_id == LxG1 || token_id == LxG2){   /* インデクスモードだったら */
        token_id = getToken();                      /* コメントもしくは改行を取ってくる */
    } else {                                    /* それ以外のモードなら */
        
        token_id = getTokenID();                    /* 式の解析で現在のトークン番号が変わったので取ってくる(コメントもしくは改行) */
    }
    
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }

    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */

}

void opStyle7(){

    setRsvWord(str);                    /* リストの予約語をセット */

    if(token_id == LxEQU){
        EQU();
    } else if(token_id == LxDS){
        DS();
    } else if(token_id == LxORG){
        ORG();
    }

}

void opStyle8(){

    setRsvWord(str);                    /* リストの予約語をセット */
    valueSeq();
    int i;
    int limit = 0;

    while((cnt - limit)/5 != 0){        /* 値が4以上のとき */
        setFirstByte(byte[limit]);        /* リストの第一バイトをセット */
        setSecondByte(byte[limit+1]);       /* リストの第二バイトをセット */
        setThirdByte(byte[limit+2]);        /* リストの第三バイトをセット */
        setForthByte(byte[limit+3]);        /* リストの第四バイトをセット */
        limit = limit + 4;        /* 4つ領域を割り当てたので4引く */
        for (i = 0; i < 4; i = i+1){
            setMachineCode(byte[limit+i]);
        }
        setPca(pca);
        pca = pca + 4;          /* pcaをカウントアップ */
        printBuffer();          /* リストのバッファを出力 */
        initBuffers();           /* バッファを初期化 */
    }

    while((cnt - limit) != 0){
        pca = pca + (cnt - limit - 1);
        setPca(pca);
        if( (cnt - limit) != 0){
            setFirstByte(byte[limit]);
            setMachineCode(byte[limit]);
            limit = limit + 1;
        }

        if((cnt - limit) != 0){
            setSecondByte(byte[limit]);
            setMachineCode(byte[limit]);
            limit = limit + 1;
        }

        if((cnt - limit) != 0){
            setThirdByte(byte[limit]);
            setMachineCode(byte[limit]);
            limit = limit + 1;
        }

        if((cnt - limit) != 0){
            setForthByte(byte[limit]);
            setMachineCode(byte[limit]);
            limit = limit + 1;
        }

    printBuffer();
    initBuffers();

    }
}

void styleAnalyzer(){
    style = searchStyle(token_id);
    if(style == 1){
        opStyle1();                         // スタイル1の実行
        printBuffer();                      // リストファイルに出力
        initBuffers();                      // バッファの初期化
    } else if(style == 2){
        opStyle2();                         // スタイル2の実行
        printBuffer();                      // リストファイルに出力
        initBuffers();                      // バッファの初期化
    } else if(style == 3){
        opStyle3();                         // スタイル3の実行
        printBuffer();
        initBuffers();                      // バッファの初期化
    } else if(style == 4){
        opStyle4();                         // スタイル4の実行
        printBuffer();
        initBuffers();                      // バッファの初期化
    } else if(style == 5){
        opStyle5();                         // スタイル5の実行
        printBuffer();
        initBuffers();                      // バッファの初期化
    } else if(style == 6){
        opStyle6();                         // スタイル6の実行
        printBuffer();
        initBuffers();                      // バッファの初期化
    } else if(style == 7){
        opStyle7();                         // スタイル7の実行
        printBuffer();
        initBuffers();                      // バッファの初期化
    } else if(style == 8){
        opStyle8();                         // スタイル8の実行
        initBuffers();                      // バッファの初期化
    } else{
        error("Bad Operation Style");
    }
}

public void pass2(FILE sourcefp, FILE listfp, FILE hexfp){
    initBuffers();                          /* バッファの初期化 */
    setMachineCode(0);
    setMachineCode(0xda);
    setLxFp(sourcefp);
    setLstFp(listfp);
    setHexFp(hexfp);
    //printf("pass2start\n");
    token_id = getToken();                  /* 最初のトークンを取ってくる */
    if(token_id != LxSPC){                  /* ファイルの最初がスペース以外なら */
        str = getLxStr();                   /* Lexicalのstrを取ってくる */
        if(token_id == LxCOM){                /* 行頭がコメントなら */
            setComment(str);                    /* リストのコメントにセット */
        } else if(isAlpha(str[0])){           /* ラベルに適した文字なら */
            setLabel(str);                      /* リストのlabelにセット */
        } else{                               /* ラベルにできない文字なら */
            token_id = LxERR;                   /* トークンをエラーにセット */
        }
    }

        while(token_id != LxEOF && token_id != LxERR){  /* ファイルの終わりまで */
        #ifdef UNIX
            printf("before function of start line   token_id = *%d*\n",token_id);
        #endif
        /**************** 行頭の処理 ****************/
        if(token_id == LxEOL){              /* 行末なら */
            token_id = getToken();          /* 次のトークンを取ってくる */
            #ifdef UNIX
                printf("start of line\n");
                ch();
            #endif
           if(token_id == LxNAM){              /* 行の先頭が空白以外なら */
                str = getLxStr();                   /* Lexicalのstrを取ってくる */
                setLabel(str);
            } else if(token_id == LxCOM){       /* 行頭がコメントなら */
                str = getLxStr();
                setComment(str);                    /* リストのコメントにセット */
            } else if(token_id == LxEOF){       /* ファイルの終わりなら */
                printBuffer();                      /* 最終行のバッファを出力 */
                break;                              /* pass2のループを抜ける */
            }
        }
        /*********************************************/

        token_id = getToken();              /* 次のトークンを取ってくる */
        #ifdef UNIX
            printf("not line token_id = %d\n",token_id);
            ch();
        #endif

        if(token_id == LxCOM){                              /* コメントのみの行なら */
            str = getLxStr();                                   /* Lexicalのstrを取ってくる */
            setComment(str);                                    /* リストのコメントにセット */
            printBuffer();
            initBuffers();
        } else if(0 <= token_id && token_id < LxRSV_NUM){    /* 予約語なら */
            styleAnalyzer();                                    /* スタイルの確定とそれぞれのスタイルの処理 */
        } else if(token_id == LxEOL){
        } else if(token_id == LxEOF){
            break;
        } else{
            error("bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!");
        }


    }

    printHex();                                         /* 溜め込んだ機械語を全て16進ファイルに出力 */
}

// Pass2の初期化
public void initPass2(){
    eofflag = false;
    pca = 0;
    str = null;
    token_id = -1;
    style = -1;
    address = 0;
    label = false;
    initLexical();
}


