#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>

#include "Pass2.hmm"
#include "Lexical.hmm"
#include "SymTbl.hmm"
#include "OperationTbl.hmm"
#include "Util.hmm"
#include "Error.hmm"
#include "Editor.hmm"

// static変数
boolean eofflag = false;    /* EOFフラグ */
int pca;
int op;
int gr;
int xr;
int data;

int first_byte;
int second_byte;
int third_byte;
int forth_byte;

int token_id;
int style;
int address;

char[] str;
char[] opr1 = array(40);
char[] opr2 = array(40);
char[] opr3 = array(40);

boolean label;

void opStyle1(){
    printf("pca = *%d*\n",pca);
    setPca(pca);
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */
    first_byte = op;                    /* 第一バイトをセット */
    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    token_id = getToken();              /* 予約語を取ってくる */
    str = getLxStr();                   /* strにLexicalのstrを取ってくる */
}

void opStyle2(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle3(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle4(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle5(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle6(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle7(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle8(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void styleAnalyzer(){
    printf("styleAnalyzer()\n");
    style = searchStyle(token_id);
    printf("Style matched\n");
    if(style == 1){
        printf("opStyle1()\n");
        opStyle1();
        printBuffer();
    } else if(style == 2){
        printf("opStyle2()\n");
        opStyle2();
    } else if(style == 3){
        printf("opStyle3()\n");
        opStyle3();
    } else if(style == 4){
        printf("opStyle4()\n");
        opStyle4();
    } else if(style == 5){
        printf("opStyle5()\n");
        opStyle5();
    } else if(style == 6){
        printf("opStyle6()\n");
        opStyle6();
    } else if(style == 7){
        printf("opStyle7()\n");
        opStyle7();
    } else if(style == 8){
        printf("opStyle8()\n");
        opStyle8();
    } else{
        error("Bad Operation Style");
    }
}

public void pass2(FILE sourcefp, FILE listfp, FILE hexfp){
    initBuffers();                          /* バッファの初期化 */
    setLxFp(sourcefp);
    setLstFp(listfp);
    setHexFp(hexfp);
    printf("pass2start\n");
    token_id = getToken();                  /* 最初のトークンを取ってくる */
    if(token_id != LxSPC){                  /* ファイルの最初がスペース以外なら */
        str = getLxStr();                   /* Lexicalのstrを取ってくる */
        if(token_id == LxCOM){                /* 行頭がコメントなら */
            setComment(str);                    /* リストのコメントにセット */
        } else if(isAlpha(str[0])){           /* ラベルに適した文字なら */
            setLabel(str);                      /* リストのlabelにセット */
        } else{                               /* ラベルにできない文字なら */
            token_id = LxERR;                   /* トークンをエラーにセット */
        }
    }
    
    printf("before LxEOL\n");
    ch();
    while(token_id != LxEOF && token_id != LxERR){  /* ファイルの終わりまで */

        /**************** 行頭の処理 ****************/
        if(token_id == LxEOL){              /* 行末なら */
            printf("First Line getToken()\n");
            token_id = getToken();          /* 次のトークンを取ってくる */
            if(token_id == LxNAM){              /* 行の先頭が空白以外なら */
                str = getLxStr();                   /* Lexicalのstrを取ってくる */
            } else if(token_id == LxCOM){       /* 行頭がコメントなら */
                setComment(str);                    /* リストのコメントにセット */
            } else if(token_id == LxEOF){       /* ファイルの終わりなら */
                printBuffer();                      /* 最終行のバッファを出力 */
                break;                              /* pass2のループを抜ける */
            }
        }
        /*********************************************/

        printf("pass2 getToken()\n");
        token_id = getToken();              /* 次のトークンを取ってくる */
        printf("%d\n",token_id);

        if(token_id == LxCOM){                              /* コメントなら */
            str = getLxStr();                                   /* Lexicalのstrを取ってくる */
            setComment(str);                                    /* リストのコメントにセット */
        } else if(0 <= token_id && token_id < LxRSV_NUM){    /* 予約語なら */
            styleAnalyzer();                                    /* スタイルの確定とそれぞれのスタイルの処理 */
        } else if(token_id == LxEOL){
            printf("End of Line\n");
        } else{
            error("bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!");
        }


    }

    printf("pass2() End\n");
}

// Pass2の初期化
public void initPass2(){
    eofflag = false;
    pca = 0;
    str = null;
    token_id = -1;
    style = -1;
    address = 0;
    label = false;
    initLexical();
    initSymTbl();
}


