
/*
 * いま許容しているバグ!!
 * 現状それぞれのopStyle関数呼び出し後にリスト出力を行っているが、
 * これではコメント文のみの行などが出力されないため、
 * 今後改行トークンが来たら出力するという手法に変更する必要がある。
 */

#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>

#include "Pass2.hmm"
#include "Lexical.hmm"
#include "SymTbl.hmm"
#include "OperationTbl.hmm"
#include "Util.hmm"
#include "Error.hmm"
#include "Editor.hmm"

// static変数
boolean eofflag = false;    /* EOFフラグ */
int pca;
int op;
int gr;
int xr;
int data;

int first_byte;
int second_byte;
int third_byte;
int forth_byte;

int token_id;
int style;
int address;

char[] str;
char[] opr1 = array(40);
char[] opr2 = array(40);
char[] opr3 = array(40);

boolean label;

void opStyle1(){
    printf("str = *%s*\n",str);
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */
    first_byte = op;                    /* 第一バイトをセット */
    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */
    token_id = getToken();              /* コメントもしくは改行トークンを取ってくる */
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }
}

void opStyle2(){
    printf("str = *%s*\n",str);
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */
    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    printf("opStyle2() register token_id = *%d*\n",token_id);
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    }
    printf("op = *%d*,  gr = *%d*\n",op,gr);
    first_byte = op | gr;               /* 第一バイトを確定 */
    printf("opStyle2() first_byte = *%d*\n",first_byte);
    setMachineCode(first_byte);         /* 16進ファイルの第一バイトをセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */
    token_id = getToken();              /* コメントもしくは改行トークンを取ってくる */
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }
}

void opStyle3(){
    printf("str = *%s*\n",str);
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    printf("opStyle3() register token_id = *%d*\n",token_id);
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    }

    printf("op = *%d*,  gr = *%d*\n",op,gr);
    first_byte = op | gr;               /* 第一バイトを確定 */
    printf("opStyle3() first_byte = *%d*\n",first_byte);
    setMachineCode(first_byte);         /* 16進ファイルの第一バイトをセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    token_id = getToken();              /* カンマを取ってくる */
    if(token_id == LxCMM){              /* カンマなら */
        setOpr(",");                    /* リストのオペランドにカンマをセット */
    } else {
        /* <式>の部分がないというエラー処理を書く */
    }

    token_id = getToken();              /* <式>の最初の部分を取ってくる */
    second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */
    setSecondByte(second_byte);         /* リストの第二バイトをセット */
    
    token_id = getTokenID();              /* 式の解析でトークン番号が変動したので取ってくる(コメントか改行がくるはず) */
    printf("opStyle4() token_id = *%d*\n",token_id);

    

    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }

}

void opStyle4(){
    printf("str = *%s*\n",str);
    setPca(pca);
    pca = pca + searchSize(token_id);   /* pcaを増加 */
    setRsvWord(str);                    /* リストの予約語をセット */
    op = searchMachineCode(token_id);   /* 予約語のop部分をセット */

    token_id = getToken();              /* <レジスタ>の部分を取ってくる */
    opr1 = getLxStr();                  /* Lexicalからレジスタの綴りを取ってくる */
    setOpr(opr1);                       /* オペランドをセット */
    printf("opStyle4() register token_id = *%d*\n",token_id);
    if(token_id == LxG0){
        gr = 0x00;
    } else if(token_id == LxG1){
        gr = 0x04;
    } else if(token_id == LxG2){
        gr = 0x08;
    } else if(token_id == LxSP){
        gr = 0x0C;
    }

    token_id = getToken();              /* カンマを取ってくる */
    if(token_id == LxCMM){              /* カンマなら */
        setOpr(",");                    /* リストのオペランドにカンマをセット */
    } else {
        /* <式>の部分がないというエラー処理を書く */
    }

    token_id = getToken();              /* '#'もしくは数値を取ってくる */
    if(token_id == LxIMM){              /* イミディエイトなら */
        setOpr("#");                        /* '#'をセット */
        xr = 0x11;                          /* xr部をセット */
        token_id = getToken();              /* <式>の最初の部分を取ってくる */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
    } else if(token_id == LxNUM || token_id == LxNAM){      /* 数値もしくはラベルなら */
        second_byte = eqAnalyzer();         /* <式>の部分を解析して第二バイトに格納する */
        setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */
        setSecondByte(second_byte);         /* リストの第二バイトをセット */
        
        token_id = getTokenID();            /* 式解析でトークン番号が変動したので現在のトークン番号を取ってくる */
        if(token_id == LxCMM){              /* カンマ(インデクス)なら */
            printf("asfkjkldsajfasfjkslajfasjfljafjafsahfjasklfkalsjfklajsfkjaslkjfajskfljas\n");
            setOpr(",");                        /* リストのオペランドにカンマをセット */
            token_id = getToken();              /* <インデクス>の部分を取ってくる */
            if(token_id == LxG1){               /* G1インデクスモードなら */
                xr = 0x01;                          /* xrをセット */
            } else if(token_id == LxG2){         /* G2インデクスモードなら */
                xr = 0x10;                          /* xrをセット */
            } else{
                /* インデクス部が異常であるエラー処理 */
            }
            opr3 = getLxStr();                  /* Lexicalのstrをopr3にセット */
            printf("GR = *%s*\n",opr3);
            setOpr(opr3);                       /* リストのオペランドにセット */
        } else {                            /* ダイレクトであるなら */
            xr = 0x00;                          /* xrをセット */
        }
    }

    first_byte = op | gr | xr;          /* first_byteを確定 */
    printf("opStyle4() first_byte = *%d*\n",first_byte);
    setMachineCode(first_byte);         /* 16進ファイルの第一バイトをセット */
    setFirstByte(first_byte);           /* リストの第一バイトをセット */

    if(token_id == LxG1 || token_id == LxG2){   /* インデクスモードだったら */
        token_id = getToken();                      /* コメントもしくは改行を取ってくる */
    } else {                                    /* それ以外のモードなら */
        
        token_id = getTokenID();                    /* 式の解析で現在のトークン番号が変わったので取ってくる(コメントもしくは改行) */
    }
    
    printf("before comment set    token_id = *%d*\n",token_id);
    if(token_id == LxCOM){
        str = getLxStr();               /* strにLexicalのstrを取ってくる */
        setComment(str);                /* リストのコメントをセットする */
    }

    setMachineCode(first_byte);         /* 16進ファイルの機械語をセット */
    setMachineCode(second_byte);        /* 16進ファイルの機械語をセット */

}

void opStyle5(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle6(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle7(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void opStyle8(){
    skipToNewLineOrEOF();           /* 実装するまでは読み飛ばす */
}

void styleAnalyzer(){
    printf("styleAnalyzer()\n");
    style = searchStyle(token_id);
    printf("Style matched\n");
    if(style == 1){
        printf("opStyle1()\n");
        opStyle1();                         // スタイル1の実行
        printBuffer();                      // リストファイルに出力
        initBuffers();                      // バッファの初期化
    } else if(style == 2){
        printf("opStyle2()\n");
        opStyle2();                         // スタイル2の実行
        printBuffer();                      // リストファイルに出力
        initBuffers();                      // バッファの初期化
    } else if(style == 3){
        printf("opStyle3()\n");
        opStyle3();                         // スタイル3の実行
        printBuffer();
        initBuffers();                      // バッファの初期化
    } else if(style == 4){
        printf("opStyle4()\n");
        opStyle4();                         // スタイル4の実行
        printBuffer();
        initBuffers();                      // バッファの初期化
    } else if(style == 5){
        printf("opStyle5()\n");
        opStyle5();                         // スタイル5の実行
        initBuffers();                      // バッファの初期化
    } else if(style == 6){
        printf("opStyle6()\n");
        opStyle6();                         // スタイル6の実行
        initBuffers();                      // バッファの初期化
    } else if(style == 7){
        printf("opStyle7()\n");
        opStyle7();                         // スタイル7の実行
        initBuffers();                      // バッファの初期化
    } else if(style == 8){
        printf("opStyle8()\n");
        opStyle8();                         // スタイル8の実行
        initBuffers();                      // バッファの初期化
    } else{
        error("Bad Operation Style");
    }
}

public void pass2(FILE sourcefp, FILE listfp, FILE hexfp){
    initBuffers();                          /* バッファの初期化 */
    setLxFp(sourcefp);
    setLstFp(listfp);
    setHexFp(hexfp);
    printf("pass2start\n");
    token_id = getToken();                  /* 最初のトークンを取ってくる */
    if(token_id != LxSPC){                  /* ファイルの最初がスペース以外なら */
        str = getLxStr();                   /* Lexicalのstrを取ってくる */
        if(token_id == LxCOM){                /* 行頭がコメントなら */
            setComment(str);                    /* リストのコメントにセット */
        } else if(isAlpha(str[0])){           /* ラベルに適した文字なら */
            printf("firstlabel *%s*\n",str);
            setLabel(str);                      /* リストのlabelにセット */
        } else{                               /* ラベルにできない文字なら */
            token_id = LxERR;                   /* トークンをエラーにセット */
        }
    }
    
    printf("before LxEOL\n");
    ch();
    while(token_id != LxEOF && token_id != LxERR){  /* ファイルの終わりまで */

        /**************** 行頭の処理 ****************/
        if(token_id == LxEOL){              /* 行末なら */
            printf("First Line getToken()\n");
            token_id = getToken();          /* 次のトークンを取ってくる */
            if(token_id == LxNAM){              /* 行の先頭が空白以外なら */
                str = getLxStr();                   /* Lexicalのstrを取ってくる */
                printf("NAM str = *%s*\n",str);
                setLabel(str);
            } else if(token_id == LxCOM){       /* 行頭がコメントなら */
                str = getLxStr();
                setComment(str);                    /* リストのコメントにセット */
            } else if(token_id == LxEOF){       /* ファイルの終わりなら */
                printBuffer();                      /* 最終行のバッファを出力 */
                break;                              /* pass2のループを抜ける */
            }
        }
        /*********************************************/

        printf("pass2 getToken()\n");
        token_id = getToken();              /* 次のトークンを取ってくる */
        printf("token_id = %d\n",token_id);

        if(token_id == LxCOM){                              /* コメントなら */
            str = getLxStr();                                   /* Lexicalのstrを取ってくる */
            setComment(str);                                    /* リストのコメントにセット */
        } else if(0 <= token_id && token_id < LxRSV_NUM){    /* 予約語なら */
            styleAnalyzer();                                    /* スタイルの確定とそれぞれのスタイルの処理 */
        } else if(token_id == LxEOL){
            printf("End of Line\n");
        } else{
            error("bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!bad instruction!!");
        }


    }

    printHex();                                         /* 溜め込んだ機械語を全て16進ファイルに出力 */
    printf("pass2() End\n");
}

// Pass2の初期化
public void initPass2(){
    eofflag = false;
    pca = 0;
    str = null;
    token_id = -1;
    style = -1;
    address = 0;
    label = false;
    initLexical();
}


