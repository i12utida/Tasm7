#include <string.hmm>
#include <stdlib.hmm>
#include <stdio.hmm>
#include <ctype.hmm>

#include "Editor.hmm"
#include "Util.hmm"

//#define UNIX

/**** static 変数 ****/
FILE listfp;
FILE hexfp;

char[] buf = array(80);             /* リスト用出力バッファ */
char[] pca = array(4);              /* プログラムカウンタ */

char[] first_byte = array(4);       /* 一つ目の機械語 */
char[] second_byte = array(4);      /* 二つ目の機械語 */
char[] third_byte = array(4);       /* 三つ目の機械語 */
char[] forth_byte = array(4);       /* 四つ目の機械語 */

char[] label = array(13);           /* ラベル長は最大で12文字 */
char[] rsvword = array(9);          /* 予約語の最大長は5文字 */
char[] opr = array(80);             /* オペランド */
char[] comment = array(80);         /* コメント */

int[] machine_code = array(256);    /* 機械語を記憶する部分 */

char[] str = array(80);             /* 任意の文字列を記憶する配列 */
int cnt;                            /* 機械語の個数をカウント */

/************* バッファの初期化 ****************/
public void initBuffers(){
   buf[0] = '\0';
   pca[0] = '\0';
   first_byte[0] = '\0';
   second_byte[0] = '\0';
   third_byte[0] = '\0';
   forth_byte[0] = '\0';
   label[0] = '\0';
   rsvword[0] = '\0';
   opr[0] = '\0';
   comment[0] = '\0';
}
/***********************************************/

/************* 機械語の初期化 *******************/
public void initMachineCode(){
   int i;
   
   cnt = 0;
   for(i = 0; i < 256; i = i+1){
       machine_code[i] = 0;
   }
}
/***********************************************/

/*********** pcaのセッター ***********/
public void setPca(int lxpca){
   //printf("setPca()\n");
   if(lxpca == 1000){                   /* ORGの命令なら(1000をORGに設定) */
       pca[0] = ' ';
       pca[1] = ' ';
   }else{
       strCpy(pca,toHex(lxpca));        /* 16進文字列に変換 */
   }

   pca[2] = '\0';                           /* Hの部分は必要ないので消す */
}
/*************************************/

/****************** 第一バイトのセッター *****************/
public void setFirstByte(int machine_code){
   //printf("setFirstByte()\n");
   strCpy(first_byte,toHex(machine_code));      /* 16進文字列に変換 */
   first_byte[2] = '\0';                        /* Hの部分は必要ないので消す */
}
/*********************************************/

/****************** 第二バイトのセッター ******************/
public void setSecondByte(int machine_code){
   //printf("setSecondByte()\n");
   strCpy(second_byte,toHex(machine_code));        /* 16進文字列に変換 */
   second_byte[2] = '\0';                          /* Hの部分は必要ないので消す */
}
/**********************************************************/

/****************** 第三バイトのセッター ******************/
public void setThirdByte(int machine_code){
   //printf("setThirdByte()\n");
   strCpy(third_byte,toHex(machine_code));         /* 16進文字列に変換 */
   third_byte[2] = '\0';                           /* Hの部分は必要ないので消す*/
}
/**********************************************************/

/****************** 第四バイトのセッター ******************/
public void setForthByte(int machine_code){
   //printf("setForthByte()\n");
   strCpy(forth_byte,toHex(machine_code));         /* 16進文字列に変換 */
   forth_byte[2] = '\0';                           /* Hの部分は必要ないので消す */
}
/**********************************************************/

/******************* ラベルのセッター **********************/
public void setLabel(char[] string){
   strCpy(label,string);
}
/**********************************************************/

/******************* 予約語のセッター **********************/
public void setRsvWord(char[] string){
   strCpy(rsvword,string);
}
/**********************************************************/

/******************* オペランドのセッター ******************/
public void setOpr(char[] string){
    //printf("setOpr() string = *%s*\n",string);
    int i;
    int oprlen = strLen(opr);           /* oprの長さを格納 */
    int length = strLen(string);        /* 入力文字列の長さを格納 */
    for(i = 0; i < length; i = i+1){
        opr[oprlen] = string[i];        /* 文字を格納 */
        oprlen = oprlen + 1;            /* 次の領域にする */
   }

   opr[oprlen] = '\0';
}
/**********************************************************/

/******************* コメントのセッター **********************/
public void setComment(char[] string){
   //printf("setComment()  %s\n",string);
   
   int i = 0;
   int j = 0;
   int length = strLen(string);

    for(i = 0; i < length; i = i+1){
        comment[i] = string[j];
        j = j+1;                    /* 次の文字へ */
   }

    comment[i] = '\0';

}

/******************* 機械語のセッター ***********************/
public void setMachineCode(int code){
   machine_code[cnt] = code;           /* 機械語をセット */
   cnt = cnt + 1;                      /* 機械語個数をカウントアプ */
}
/***********************************************************/

/**********************************************************/

/********** Editorのstrのセッター *************/
public void setEdiStr(char[] string){
   int i;
   int len = strLen(string);

   for(i = 0; i < len; i = i+1){
       str[i] = string[i];
   }
   
   str[i] = ' ';             /* スペースを追加 */
   str[i+1] = '\0';          /* 文字列を完成させる */
}
/**********************************************/

/*********** pcaをbufに格納する関数 ***************/
void storePca(){
    //printf("storePca() *%s*\n",pca);
    int buflen = strLen(buf);          // 出力用bufの長さを格納
    int length = strLen(pca);       // 入力用lenの長さを格納

    int i;


    for(i = 0; i < length; i = i+1){   // 入力の文字列の長さまで
        buf[buflen] = pca[i];       // バッファに続けて代入
        buflen = buflen + 1;
    }
    buf[buflen] = ' ';              // 整列させるための空白を入れる
    buf[buflen+1] = ' ';            // 整列させるための空白を入れる
    buf[buflen+2] = '\0';           // 文字列を完成させる
  
   }

/************************************************/

/*********** first_byteをbufに格納する関数 ***************/
void storeFirstByte(){
    //printf("storeFirstByte()\n");
    int buflen = strLen(buf);          // 出力用bufの長さを格納
    int length = strLen(first_byte);       // 入力用lenの長さを格納

    int i;
    
    if(length == 0){
        buf[buflen] = ' ';
        buflen = buflen + 1;
        buf[buflen] = ' ';
        buflen = buflen + 1;
    } else {
        for(i = 0; i < length; i = i+1){   // 入力の文字列の長さまで
            buf[buflen] = first_byte[i];       // バッファに続けて代入
            buflen = buflen + 1;
        }
    }
    buf[buflen] = ' ';              // 整列させるための空白を入れる
    buf[buflen+1] = '\0';           // 文字列を完成させる
  
}

/************************************************/

/*********** second_byteをbufに格納する関数 ***************/
void storeSecondByte(){
    //printf("storeSecondByte()\n");
    int buflen = strLen(buf);          // 出力用bufの長さを格納
    int length = strLen(second_byte);       // 入力用lenの長さを格納

    int i;

    if(length == 0){
        buf[buflen] = ' ';
        buflen = buflen + 1;
        buf[buflen] = ' ';
        buflen = buflen + 1;
    } else{
        for(i = 0; i < length; i = i+1){   // 入力の文字列の長さまで
            buf[buflen] = second_byte[i];       // バッファに続けて代入
            buflen = buflen + 1;
        }
    }
    buf[buflen] = ' ';              // 整列させるための空白を入れる
    buf[buflen+1] = '\0';           // 文字列を完成させる
  
}

/************************************************/

/*********** third_byteをbufに格納する関数 ***************/
void storeThirdByte(){
    //printf("storeThirdByte()\n");
    int buflen = strLen(buf);          // 出力用bufの長さを格納
    int length = strLen(third_byte);       // 入力用lenの長さを格納

    int i;

    if(length == 0){
        buf[buflen] = ' ';
        buflen = buflen + 1;
        buf[buflen] = ' ';
        buflen = buflen + 1;
    } else{
        for(i = 0; i < length; i = i+1){   // 入力の文字列の長さまで
            buf[buflen] = third_byte[i];       // バッファに続けて代入
            buflen = buflen + 1;
        }
    }
    buf[buflen] = ' ';              // 整列させるための空白を入れる
    buf[buflen+1] = '\0';           // 文字列を完成させる
  
}

/************************************************/

/*********** forth_byteをbufに格納する関数 ***************/
void storeForthByte(){
    //printf("storeForthByte()\n");
    int buflen = strLen(buf);          // 出力用bufの長さを格納
    int length = strLen(forth_byte);       // 入力用lenの長さを格納

    int i;

    if(length == 0){
        buf[buflen] = ' ';
        buflen = buflen + 1;
        buf[buflen] = ' ';
        buflen = buflen + 1;
    } else{
        for(i = 0; i < length; i = i+1){   // 入力の文字列の長さまで
            buf[buflen] = forth_byte[i];       // バッファに続けて代入
            buflen = buflen + 1;
        }
    }
    buf[buflen] = ' ';              // 整列させるための空白を入れる
    buf[buflen+1] = '\0';           // 文字列を完成させる
  
}

/************************************************/

/************* bufにラベルを格納する関数 **************/
void storeLabel(){
    //printf("storeLabel()  *%s*\n",label);
    int buflen = strLen(buf);       /* 出力bufの長さを格納 */
    int length = strLen(label);     /* 入力文字列の長さを格納*/

    int i;

    for(i = 0; i < length; i = i+1){
        buf[buflen] = label[i];
        buflen = buflen + 1;
    }

    for(i = 0; i < 8-length; i = i+1){
        buf[buflen] = ' ';
        buflen = buflen + 1;
    }

    buf[buflen] = '\0';

}

/******************************************************/

/************* bufに予約語を格納する関数 **************/
void storeRsvWord(){
    //printf("storeRsvWord()  *%s\n",rsvword);
    int buflen = strLen(buf);       /* 出力bufの長さを格納 */
    int length = strLen(rsvword);     /* 入力文字列の長さを格納*/

    int i;

    for(i = 0; i < length; i = i+1){
        buf[buflen] = rsvword[i];
        buflen = buflen + 1;
    }

    for(i = 0; i < 8-length; i = i+1){
        buf[buflen] = ' ';
        buflen = buflen + 1;
    }

    buf[buflen] = '\0';

}

/*******************************************************/

/************* bufにオペランドを格納する関数 **************/
void storeOpr(){
   // printf("storeOpr()  *%s\n",opr);
    int buflen = strLen(buf);       /* 出力bufの長さを格納 */
    int length = strLen(opr);     /* 入力文字列の長さを格納*/

    int i;

    for(i = 0; i < length; i = i+1){
        buf[buflen] = opr[i];
        buflen = buflen + 1;
    }

    for(i = 0; i < 15-length; i = i+1){
        buf[buflen] = ' ';
        buflen = buflen + 1;
    }

    buf[buflen] = '\0';

}

/*******************************************************/

/************* bufにコメントを格納する関数 **************/
void storeComment(){
    //printf("storeComment()  *%s\n",comment);
    int buflen = strLen(buf);       /* 出力bufの長さを格納 */
    int length = strLen(comment);     /* 入力文字列の長さを格納*/

    int i;

    for(i = 0; i < length; i = i+1){
        buf[buflen] = comment[i];
        buflen = buflen + 1;
    }
    buf[buflen] = '\0';

}

/*******************************************************/

/***************** バッファ出力 *******************/
public void printBuffer(){
   int buflen;                     // 出力用bufの長さを格納
   int len;                        // 入力用lenの長さを格納
   
   int i;
   int j;

   for(i = 0; i < 9; i = i+1){         // 入力の個数まで
       
       if(i == 0){
           storePca();
       } else if(i == 1){
           storeFirstByte();
       } else if(i == 2){
           storeSecondByte();
       } else if(i == 3){
           storeThirdByte();        // 第三バイトをstrに格納
       } else if(i == 4){
           storeForthByte();        // 第四バイトをstrに格納
       } else if(i == 5){
           storeLabel();            // ラベルをstrに格納
       } else if(i == 6){
           storeRsvWord();          // 予約語をstrに格納
       } else if(i == 7){
           storeOpr();          // オペランドをstrに格納
       } else if(i == 8){
           storeComment();         // コメントをstrに格納
       }
       
   }

   buflen = strLen(buf);
   buf[buflen] = '\n';
   buf[buflen+1] = '\0';

    #ifdef UNIX
        printf("Buffer     *%s*\n",buf);
    #endif

   fputs(buf,listfp);                  // リストファイルに出力
}
/***************************************************************************/

/************** 16進ファイルに出力 *****************************************/
public void printHex(){
    int i;                              /* プログラムの番地を記憶する変数 */

    for(i = 0; i < cnt; i = i+1){        /* 機械語の個数分繰り返す */
        fputc(chr(machine_code[i]), hexfp);
    
       //strCpy(str,toHex(machine_code[i]));  /* int型からchar型に変換 */
        //str[2] = '\0';                  /* 'H'を取り除く */
        //fputs(str,hexfp);               /* 16進ファイルに出力 */
        
    }

    while(i <= 0xda + 2){
        fputc(chr(0),hexfp);
        // fputs("00",hexfp);
        i = i+1;
    }
}

/***************************************************************************/

/*********************** リストファイルのセッター **************************/
public void setLstFp(FILE lstfp){
   listfp = lstfp;                     // Editorのリストファイルのポインタをセット
}
/***************************************************************************/

/********************** 16進ファイルのセッター *****************************/
public void setHexFp(FILE hfp){
   hexfp = hfp;                        // Editorの16進ファイルのポインタをセット
}
/***************************************************************************/
